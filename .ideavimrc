""" Common settings -------------------------
set showmode
set so=5
set incsearch
set nu
set number
set relativenumber
set clipboard+=unnamedplus

" Escape any mode.
inoremap jk <esc>

" New line, without insert mode
nnoremap o o<esc>
nnoremap O O<esc>

" Show existing tab with 2 spaces width
set tabstop=2
set softtabstop=2

" when indenting with '>', use 2 spaces width
set shiftwidth=2

" Break lines on view's end, respecting words
set wrap linebreak

""" Plugins  --------------------------------
set surround
set multiple-cursors
set commentary
set which-key
set notimeout
set argtextobj
set easymotion
set textobj-entire
set ReplaceWithRegister
Plug 'preservim/nerdtree'
" Plug 'kyazdani42/nvim-tree.lua'
Plug 'nvim-telescope/telescope.nvim'

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"


""" Idea specific settings ------------------
set ideajoin
set ideastatusicon=gray
set idearefactormode=keep


""" Sethandlers for key bindings
sethandler <C-2> a:vim
sethandler <C-S-2> a:vim
sethandler <C-6> a:vim
sethandler <C-S-6> a:vim
sethandler <C-A> a:vim
sethandler <C-B> a:vim
sethandler <C-C> a:vim
sethandler <C-D> a:vim
sethandler <C-E> a:vim
sethandler <C-F> a:vim
sethandler <C-G> a:vim
sethandler <C-H> a:vim
sethandler <C-I> a:vim
sethandler <C-J> a:vim
sethandler <C-K> a:vim
sethandler <C-L> a:vim
sethandler <C-M> a:vim sethandler <C-N> a:vim sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-Q> a:vim
sethandler <C-R> a:vim
sethandler <C-S> a:vim
sethandler <C-T> a:vim
sethandler <C-U> a:vim
sethandler <C-V> a:vim
sethandler <C-W> a:vim
sethandler <C-X> a:vim
sethandler <C-Y> a:vim
sethandler <C-[> a:vim
sethandler <C-\> a:vim
sethandler <C-]> a:vim

""" Map leader to space ---------------------
let mapleader=" "

""" Which key settings -----------------------
set notimeout
let g:WhichKey_ShowVimActions = "true"
let g:WhichKey_SortOrder = "by_key_prefix_first"

"""" Mappings (WhichKey)
"""""" Comment
let g:WhichKeyDesc_commentray_prefix = "gc Comment"
let g:WhichKeyDesc_commentray_action = "gcc line"
let g:WhichKeyDesc_commentray_action = "gcu block"

"""" Debugging
let g:WhichKeyDesc_debug_prefix = "<leader>d Debug"
map <leader>dB <Action>(AddConditionalBreakpoint)
let g:WhichKeyDesc_debug_conditional_breakpoint_action = "<leader>dB Conditional Breakpoint"
map <leader>db <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_debug_breakpoint_action = "<leader>db Toggle Breakpoint"
map <leader>dc <Action>(Resume)
let g:WhichKeyDesc_debug_resume_action = "<leader>dc Continue"
map <leader>dI <Action>(XDebugger.Inspect)
let g:WhichKeyDesc_debug_inspect_action = "<leader>de Inspect"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_debug_step_into_action = "<leader>di Step Into"
map <leader>do <Action>(StepOver)
let g:WhichKeyDesc_debug_step_over_action = "<leader>do Step Over"
map <leader>ds <Action>(Debug)
let g:WhichKeyDesc_debug_start_action = "<leader>ds Debug"
map <leader>du <Action>(StepOut)
let g:WhichKeyDesc_debug_step_out_action = "<leader>du Step Out"
map <leader>dx <Action>(Stop)
let g:WhichKeyDesc_debug_stop_action = "<leader>dx Stop"

"""" Edit code
map <leader>r <Action>(RenameElement)
let g:WhichKeyDesc_rename_action = "<leader>r Rename"
nnoremap <leader>q :q<CR>
let g:WhichKeyDesc_quit_action = "<leader>q Close Window"
nnoremap <leader>Q :qa<CR>
let g:WhichKeyDesc_quit_all_action = "<leader>Q Close All"
nnoremap <leader>bd :bd<CR>
let g:WhichKeyDesc_buffer_prefix = "<leader>b Buffer"
let g:WhichKeyDesc_close_buffer_action = "<leader>bd Close Buffer"
nnoremap <leader>w :w<CR>
let g:WhichKeyDesc_save_action = "<leader>w Save"
"nnoremap <leader>wa :wall<CR>
nnoremap <leader>o :only<CR>
let g:WhichKeyDesc_close_others_action = "<leader>o Close Others"

"""""" Git
let g:WhichKeyDesc_git_prefix = "<leader>G Git"
map <leader>Gg <Action>(Git.Menu)
let g:WhichKeyDesc_git_menu_action = "<leader>Gg Menu"
map <leader>GB <Action>(Vcs.ShowTabbedFileHistory)
let g:WhichKeyDesc_blame_file_history_Action = "<leader>GB Blame (file)"
map <leader>Gb <Action>(Annotate)
let g:WhichKeyDesc_blame_file_lines_action = "<leader>Gb Blame (lines)"

"""""" LSP
let g:WhichKeyDesc_lsp_prefix = "<leader>l LSP"
map <leader>lf <Action>(ReformatCode)
let g:WhichKeyDesc_lsp_format_action = "<leader>lf Format code"
map <leader>lr <Action>(FindUsages)
let g:WhichKeyDesc_lsp_find_usages_action = "<leader>lr Find Usages"

"""""" Markdown 
let g:WhichKeyDesc_markdown_prefix = "<leader>m Markdown"
map <leader>me <Action>(Markdown.Layout.EditorOnly)
let g:WhichKeyDesc_markdown_editor_action = "<leader>me Editor Only"
map <leader>mp <Action>(Markdown.Layout.EditorAndPreview)
let g:WhichKeyDesc_markdown_preview_action = "<leader>mp Preview"
map <leader>mt <Action>(Markdown.GenerateTableOfContents)
let g:WhichKeyDesc_markdown_toc_action = "<leader>mt TOC"
map <leader>mP <Action>(Markdown.Layout.PreviewOnly)
let g:WhichKeyDesc_markdown_preview_only_action = "<leader>mP Preview Only"
map <leader>mR <Action>(Markdown.Table.InsertRow.InsertAbove)
let g:WhichKeyDesc_markdown_table_insert_row_above_action = "<leader>ma Insert Row Above"
map <leader>mr <Action>(Markdown.Table.InsertRow.InsertBelow)
let g:WhichKeyDesc_markdown_table_insert_row_below_action = "<leader>mb Insert Row Below"
map <leader>mc <Action>(Markdown.Table.InsertTableColumn.InsertAfter)
let g:WhichKeyDesc_markdown_table_insert_column_after_action = "<leader>mc Insert Column After"
map <leader>mC <Action>(Markdown.Table.InsertTableColumn.InsertBefore)
let g:WhichKeyDesc_markdown_table_insert_column_before_action = "<leader>md Insert Column Before"

"""""" Menus
nnoremap <leader>e :NERDTreeToggle<CR>
let g:WhichKeyDesc_explorer_action = "<leader>e Explorer"

"""""" Navigating
nnoremap <C-k> :bn<CR>
nnoremap <C-j> :bp<CR>
map gr <action>(FindUsages)
let g:WhichKeyDesc_find_usages_action = "gr Get References"
let g:WhichKeyDesc_goto_top = "gg goto first line"

"""""" Search 
let g:WhichKeyDesc_search_prefix = "<leader>f Search"
map <leader>ff <Action>(SearchEverywhere.CompleteCommand)
let g:WhichKeyDesc_search_everywhere_action = "<leader>ff Search Everywhere"

"""""" Terminal 
map <leader>T <Action>(ActivateTerminalToolWinddow)
let g:WhichKeyDesc_terminal_action = "<leader>T Terminal"

"""""" Todo 
map <leader>t <Action>(ActivateTODOToolWindow)
let g:WhichKeyDesc_todo_action = "<leader>t Todo"

"""""" Zen Mode

"""""" View
map <leader>z <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_zen_mode_toggle_action = "<leader>z Zen Mode"

"map <leader>o <Action>(FileStructurePopup)
"nnoremap <leader>f :Telescope find_files<CR>

""""" Copy to other windows (unecessary if using 'set clipboard+=unnamedplus')
"nnoremap y "+y
"vnoremap y "+y
"nnoremap Y "+Y
"vnoremap Y "+Y

